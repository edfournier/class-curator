{
    "create_table_user": "CREATE TABLE IF NOT EXISTS USER (ID INTEGER PRIMARY KEY AUTOINCREMENT, USERNAME STRING UNIQUE NOT NULL, DISPLAY_NAME STRING NOT NULL, GRAD_YEAR NUMBER NOT NULL, GRAD_SEMESTER STRING NOT NULL, MAJOR STRING NOT NULL);",
    "create_table_session": "CREATE TABLE IF NOT EXISTS SESSION (TOKEN STRING UNIQUE NOT NULL, USER_ID INTEGER REFERENCES USER (ID) UNIQUE NOT NULL, EXPIRES_AT DATETIME DEFAULT CURRENT_TIMESTAMP);",
    "create_table_course": "CREATE TABLE IF NOT EXISTS COURSE (ID INTEGER PRIMARY KEY AUTOINCREMENT, CODE STRING NOT NULL, NAME STRING, SUBJECT STRING NOT NULL, DESCRIPTION STRING NOT NULL);",
    "create_table_class": "CREATE TABLE IF NOT EXISTS CLASS (ID INTEGER PRIMARY KEY AUTOINCREMENT, COURSE_ID INTEGER REFERENCES COURSE (ID), YEAR INTEGER NOT NULL, SEMESTER STRING NOT NULL, PROF STRING);",
    "create_table_rating_aggr": "CREATE TABLE IF NOT EXISTS RATING_AGGR (COURSE_ID INTEGER REFERENCES COURSE (ID), CLASS_ID INTEGER REFERENCES CLASS (ID), RATE_USER_AVG REAL, RATE_RMP_HELPFULNESS REAL, RATE_RMP_DIFFICULTY REAL);",
    "create_table_rating_user": "CREATE TABLE IF NOT EXISTS RATING_USER (USER_ID INTEGER REFERENCES USER (ID), CLASS_ID INTEGER REFERENCES CLASS (ID), RATING INTEGER DEFAULT 0 NOT NULL, REVIEW STRING DEFAULT '', CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP, UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP);",
    "create_table_friendship": "CREATE TABLE IF NOT EXISTS FRIENDSHIP (USER_1_ID INTEGER REFERENCES USER (ID), USER_2_ID INTEGER REFERENCES USER (ID) CHECK (USER_1_ID < USER_2_ID), CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP);",
    "create_table_friend_request": "CREATE TABLE IF NOT EXISTS FRIEND_REQUEST (SENDER_ID INTEGER REFERENCES USER (ID), RECEIVER_ID INTEGER REFERENCES USER (ID), CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP);"
}