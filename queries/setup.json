{
    "create_table_user": "CREATE TABLE IF NOT EXISTS USER (ID INTEGER PRIMARY KEY AUTOINCREMENT, USERNAME STRING UNIQUE NOT NULL, SALT STRING NOT NULL, HASH STRING NOT NULL, DISPLAY_NAME STRING NOT NULL, YEAR_GRAD NUMBER NOT NULL, MAJOR STRING NOT NULL, MINOR STRING);",
    "create_table_course": "CREATE TABLE IF NOT EXISTS COURSE (ID INTEGER PRIMARY KEY AUTOINCREMENT, CODE STRING NOT NULL, NAME STRING, SUBJECT STRING NOT NULL, DESCRIPTION STRING NOT NULL);",
    "create_table_class": "CREATE TABLE IF NOT EXISTS CLASS (ID INTEGER PRIMARY KEY AUTOINCREMENT, COURSE_ID INTEGER REFERENCES COURSE (ID), YEAR INTEGER NOT NULL, SEMESTER STRING NOT NULL, PROF STRING);",
    "create_table_rating_aggr": "CREATE TABLE IF NOT EXISTS RATING_AGGR (ID_COURSE INTEGER REFERENCES COURSE (ID), ID_CLASS INTEGER REFERENCES CLASS (ID), RATE_USER_AVG REAL, RATE_RMP_HELPFULNESS REAL DEFAULT 0.0, RATE_RMP_DIFFICULTY REAL DEFAULT 0.0);",
    "create_table_rating_user": "CREATE TABLE IF NOT EXISTS RATING_USER (ID_USER INTEGER REFERENCES USER (ID), ID_CLASS INTEGER REFERENCES CLASS (ID), RATING INTEGER DEFAULT 0 NOT NULL, REVIEW STRING DEFAULT '');",
    "create_table_friendship": "CREATE TABLE IF NOT EXISTS FRIENDSHIP (ID_USER_1 INTEGER REFERENCES USER (ID), ID_USER_2 INTEGER REFERENCES USER (ID) CHECK (ID_USER_1 < ID_USER_2), CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP);",
    "create_table_friend_request": "CREATE TABLE IF NOT EXISTS FRIEND_REQUEST (ID_USER_SENDER INTEGER REFERENCES USER (ID), ID_USER_RECEIVER INTEGER REFERENCES USER (ID), CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP);"
}